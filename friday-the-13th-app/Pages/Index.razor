@page "/"

@using IMDbApiLib
@using IMDbApiLib.Models

@inject HttpClient Http

@if (!string.IsNullOrEmpty(error))
{
    <p><strong>Error: @error</strong></p>
}
else if (movies == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            @foreach (var movie in movies)
            {
                <div class="col-sm-12 col-md-6 col-lg-4 col-xl-3">
                    <div class="card" style="width: 18rem;">
                        <img src="@movie.Image" class="card-img-top" alt="@movie.Title">
                        <div class="card-body">
                            <h5 class="card-title">@movie.Title</h5>
                            <p class="card-text">@movie.Description</p>
                            <NavLink href="@("movies/" + ToTitleId(movie.Id))" class="btn btn-primary">Details</NavLink>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private string error = string.Empty;
    private List<SearchResult> movies;

    protected override async Task OnInitializedAsync()
    {
        var imdbKey = await Http.GetFromJsonAsync<string>("assets/imdb-api.json");

        try {
            var imdb = new ApiLib(imdbKey, Http);
            var search = await imdb.SearchMovieAsync("Friday the 13th");

            if (!string.IsNullOrEmpty(search.ErrorMessage))
            {
                error = search.ErrorMessage;
            }
            else
            {
                movies = search.Results.OrderBy(movie => movie.Description).ToList();
            }
        }
        catch (Exception exception)
        {
            error = exception.Message;
        }
    }

    private int ToTitleId(string title)
    {
        return Convert.ToInt32(title.Substring(2));
    }
}